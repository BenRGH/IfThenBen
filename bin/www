#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('ifthenben:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

// HTTPS Cert stuff
const privateKey = fs.readFileSync('/etc/letsencrypt/live/www.ifthenben.com/privkey.pem', 'utf8');
const certificate = fs.readFileSync('/etc/letsencrypt/live/www.ifthenben.com/cert.pem', 'utf8');
const ca = fs.readFileSync('/etc/letsencrypt/live/www.ifthenben.com/chain.pem', 'utf8');

const credentials = {
  key: privateKey,
  cert: certificate,
  ca: ca
};

// Port
const portHTTP = 80;
app.set('portHTTP', portHTTP);
const portHTTPS = 443;
app.set('portHTTPS', portHTTPS);


// Create servers
const serverHTTP = http.createServer(app);
const serverHTTPS = https.createServer(credentials, app);

//Listen on both servers
serverHTTP.listen(portHTTP);
serverHTTPS.listen(portHTTPS);
serverHTTP.on('error', onError);
serverHTTP.on('listening', onListening);
serverHTTPS.on('error', onError);
serverHTTPS.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = serverHTTP.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
